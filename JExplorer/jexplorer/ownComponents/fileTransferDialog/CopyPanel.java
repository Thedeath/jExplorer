/*
 * Copyright (C) 2011 Thedeath<www.fseek.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jexplorer.ownComponents.fileTransferDialog;

import java.util.ArrayList;
import javax.swing.Icon;
import org.fseek.plugin.interfaces.MyFile;
import jexplorer.util.UtilBox;
import org.fseek.components.CompEffects;

/**
 *
 * @author Thedeath<www.fseek.org>
 */
public class CopyPanel extends javax.swing.JPanel
{
    private long lastModified;
    private long fileSize;
    private String filePath;
    private String fileName;
    
    private MyFile file;
    
    private String mainTitle;
    private String subTitle;
    
    private Icon fileIcon;
    
    private CompEffects compEffects;

    
    private boolean fileInfoEnabled;
    
    public CopyPanel()
    {
        initComponents();
        setFileInfoEnabled(true);
    }
    
    /** Creates new form CopyPanel */
    public CopyPanel(String mainTitle, String subTitle, MyFile f, CompEffects compEffects)
    {
        this.compEffects = compEffects;
        initComponents();
        intMain(mainTitle, subTitle, f);
    }
    
    /** Creates new form CopyPanel */
    public CopyPanel(String mainTitle, String subTitle)
    {
        initComponents();
        intMain(mainTitle, subTitle, null);
    }
    
    private void intDesign(String mainTitle, String subTitle)
    {
        this.setSubTitle(subTitle);
        this.setMainTitle(mainTitle);
        mainTitleLabel.setText(mainTitle);
        subTitleLabel.setText(subTitle);
    }
    
    private void intFilePanel(MyFile f)
    {
        if(f == null)
        {
            setFileInfoEnabled(false);
            return;
        }
        setFileName(f.getFileName());
        setFilePath(f.getAbsolutePath());
        setFileSize(f.getFileSize());
        setLastModified(f.getLastModified());
        setFileIcon(f.getIcon(true));
    }
    
    private void intMain(String mainTitle, String subTitle, MyFile f)
    {
        intDesign(mainTitle, subTitle);
        intFilePanel(f);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrowIconLabel = new javax.swing.JLabel();
        mainTitleLabel = new javax.swing.JLabel();
        subTitleLabel = new javax.swing.JLabel();
        fileInfoPanel = new javax.swing.JPanel();
        fileNameLabel = new javax.swing.JLabel();
        filePathLabel = new javax.swing.JLabel();
        fileModifiedDateLabel = new javax.swing.JLabel();
        fileSizeLabel = new javax.swing.JLabel();
        fileIconLabel = new javax.swing.JLabel();

        setOpaque(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });

        arrowIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/windows/rightArrowGreen.png"))); // NOI18N

        mainTitleLabel.setFont(new java.awt.Font("Segoe UI", 0, 16));
        mainTitleLabel.setForeground(new java.awt.Color(0, 51, 153));
        mainTitleLabel.setText("Kopieren und ersetzen");

        subTitleLabel.setFont(new java.awt.Font("Segoe UI", 0, 11));
        subTitleLabel.setForeground(new java.awt.Color(0, 51, 153));
        subTitleLabel.setText("Datei im Zielordner durch die zu kopierende Datei ersetzen:");
        this.subTitle = subTitleLabel.getText();

        fileInfoPanel.setOpaque(false);

        fileNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 11));
        fileNameLabel.setText("test.txt");

        filePathLabel.setFont(new java.awt.Font("Segoe UI", 0, 11));
        filePathLabel.setForeground(new java.awt.Color(0, 51, 153));
        filePathLabel.setText("<html>C:\\Benutzer\\Simon\\Eigene Dokumente\\NetbeansProjects<br>\\JExplorer\\asd\\hhh\\eee)</html>");

        fileModifiedDateLabel.setText("Änderungsdatum: 13.06.2011 22:07");

        fileSizeLabel.setText("Größe: 0 Bytes");

        javax.swing.GroupLayout fileInfoPanelLayout = new javax.swing.GroupLayout(fileInfoPanel);
        fileInfoPanel.setLayout(fileInfoPanelLayout);
        fileInfoPanelLayout.setHorizontalGroup(
            fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileInfoPanelLayout.createSequentialGroup()
                .addComponent(fileIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(322, Short.MAX_VALUE))
            .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileInfoPanelLayout.createSequentialGroup()
                    .addGap(92, 92, 92)
                    .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fileModifiedDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addComponent(fileSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addComponent(filePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))))
        );
        fileInfoPanelLayout.setVerticalGroup(
            fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addGroup(fileInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileInfoPanelLayout.createSequentialGroup()
                    .addGap(4, 4, 4)
                    .addComponent(fileNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(filePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileSizeLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(fileModifiedDateLabel)
                    .addGap(5, 5, 5)))
        );

        this.fileName = fileNameLabel.getText();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(arrowIconLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subTitleLabel)
                            .addComponent(mainTitleLabel)))
                    .addComponent(fileInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mainTitleLabel)
                    .addComponent(arrowIconLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        this.mainTitle = mainTitleLabel.getText();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseEntered
    {//GEN-HEADEREND:event_formMouseEntered
        compEffects.mouseOver(true, this);
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseExited
    {//GEN-HEADEREND:event_formMouseExited
        compEffects.mouseOver(false, this);
    }//GEN-LAST:event_formMouseExited

    private void formFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_formFocusGained
    {//GEN-HEADEREND:event_formFocusGained
        compEffects.select(true, this);
    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_formFocusLost
    {//GEN-HEADEREND:event_formFocusLost
        compEffects.select(false, this);
    }//GEN-LAST:event_formFocusLost

    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
        this.requestFocus();
    }//GEN-LAST:event_formMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel arrowIconLabel;
    private javax.swing.JLabel fileIconLabel;
    private javax.swing.JPanel fileInfoPanel;
    private javax.swing.JLabel fileModifiedDateLabel;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JLabel fileSizeLabel;
    private javax.swing.JLabel mainTitleLabel;
    private javax.swing.JLabel subTitleLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the fileInfoEnabled
     */
    public boolean isFileInfoEnabled()
    {
        return fileInfoEnabled;
    }

    /**
     * @param fileInfoEnabled the fileInfoEnabled to set
     */
    public void setFileInfoEnabled(boolean fileInfoEnabled)
    {
        fileInfoPanel.setVisible(fileInfoEnabled);
        this.invalidate();
        this.fileInfoEnabled = fileInfoEnabled;
    }

    /**
     * @return the mainTitle
     */
    public String getMainTitle()
    {
        return mainTitle;
    }

    /**
     * @param mainTitle the mainTitle to set
     */
    public void setMainTitle(String mainTitle)
    {
        mainTitleLabel.setText(mainTitle);
        this.mainTitle = mainTitle;
    }

    /**
     * @return the subTitle
     */
    public String getSubTitle()
    {
        return subTitle;
    }

    /**
     * @param subTitle the subTitle to set
     */
    public void setSubTitle(String subTitle)
    {
        subTitleLabel.setText(subTitle);
        this.subTitle = subTitle;
    }

    /**
     * @return the filePath
     */
    public String getFilePath()
    {
        return filePath;
    }

    /**
     * @param filePath the filePath to set
     */
    public void setFilePath(String filePath)
    {
        ArrayList<String> split = new ArrayList<String>();
        int beginIndx = 0;
        while(filePath.length() > 53)
        {
            String s = filePath.substring(beginIndx, beginIndx+53);
            split.add(s);
            beginIndx = beginIndx+53;
            filePath = filePath.substring(beginIndx, filePath.length());
        }
        StringBuilder sb = new StringBuilder();
        sb.append("<html>");
        for(String s : split)
        {
            sb.append(s);
            sb.append("<br>");
        }
        sb.append(filePath);
        sb.append("</html>");
        filePathLabel.setText(sb.toString());
        this.filePath = filePath;
    }

    /**
     * @return the lastModified
     */
    public long getLastModified()
    {
        return lastModified;
    }

    /**
     * @param lastModified the lastModified to set
     */
    public void setLastModified(long lastModified)
    {
        fileModifiedDateLabel.setText("Änderungsdatum: " + UtilBox.fileDateToFormatString(lastModified));
        this.lastModified = lastModified;
    }

    /**
     * @return the fileSize
     */
    public long getFileSize()
    {
        return fileSize;
    }

    /**
     * @param fileSize the fileSize to set
     */
    public void setFileSize(long fileSize)
    {
        fileSizeLabel.setText("Größe: " + UtilBox.fileSizeToString(fileSize));
        this.fileSize = fileSize;
    }

    /**
     * @return the fileName
     */
    public String getFileName()
    {
        return fileName;
    }

    /**
     * @param fileName the fileName to set
     */
    public void setFileName(String fileName)
    {
        fileNameLabel.setText(fileName);
        this.fileName = fileName;
    }

    /**
     * @return the fileIcon
     */
    public Icon getFileIcon()
    {
        return fileIcon;
    }

    /**
     * @param fileIcon the fileIcon to set
     */
    public void setFileIcon(Icon fileIcon)
    {
        fileIconLabel.setIcon(fileIcon);
        this.fileIcon = fileIcon;
    }

    /**
     * @return the file
     */
    public MyFile getFile()
    {
        return file;
    }

    /**
     * @param file the file to set
     */
    public void setFile(MyFile file)
    {
        intFilePanel(file);
        this.file = file;
    }
}
